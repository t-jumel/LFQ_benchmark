legend.background = element_rect(
fill = "transparent",
color = NA,
size = 0.1
),
legend.key = element_rect(fill = "transparent", color = NA),
legend.key.height = unit(0, "cm"),
legend.margin = margin(3, 0, 0, 0),
legend.text.align = 0,
legend.box.spacing = unit(0.0, "cm"),
legend.box.margin = margin(0, 0, 0,-0.55, "cm"),
legend.spacing.x = unit(0.0, "cm"),
legend.position = "top",
legend.text = element_text(
face = "plain",
color = 'black',
size = 9,
angle = 0,
margin = margin(0, 0, 0, 0)
)
) +
coord_cartesian(ylim = c(FC_min, FC_max)) +
scale_y_continuous(
name = "log2(A:B)",
breaks = seq(from = round(digits = 0, FC_min), to = round(digits = 0, FC_max), by = 1 ),
expand = expansion(mult = c(.02, .02))
) +
scale_x_continuous(name = "log2(B)",
expand = expansion(mult = c(.02, .02)),
breaks= pretty_breaks())  +
facet_grid(. ~ Species) +
theme(strip.text.x = element_blank()) +
guides(colour = guide_legend(override.aes = list(alpha = 1)))
}
# Generate Plots
plot_Prot_facet_ori <-  f.p.facet(Prot3,
subtitle_Prot,
caption_Prot)
plot_Prec_facet_ori <-  f.p.facet(Prec3,
subtitle_Prec,
caption_Prec)
# Add boxplot on the side
plot_Prot_facet <-
plot_grid(
plot_Prot_facet_ori,
plot_Prot_box_simple,
labels = "",
rel_widths = c(1, 0.25),
align = "h",
axis = "bt"
)
plot_Prec_facet <-
plot_grid(
plot_Prec_facet_ori,
plot_Prec_box_simple,
labels = "",
rel_widths = c(1, 0.25),
align = "h",
axis = "bt"
)
# Export combined plots
f.export.plot(plot_Prot_facet, "Prot_facet", plot_width, plot_height, plot_res)
f.export.plot(plot_Prec_facet, "Prec_facet", plot_width, plot_height, plot_res)
# Plot Volcano ------------------------------------------------------------
f.p.volcano <- function(a.df,
a.subtitle,
a.caption)   {
ggplot(a.df,
aes(
x = log2FC,
y = -log10(p_adj),
color = Species,
fill = Species
)) +
geom_hline(
yintercept = -log10(alpha_limma),
linetype = "dotted",
color = "grey60",
alpha = 0.8
) +
geom_vline(
xintercept = c(-limit_FC,+limit_FC),
linetype = c("dotted", "dotted"),
color = c("grey60", "grey60"),
alpha = c(0.8, 0.8)
) +
geom_point(shape = 16,
size = 1.2,
alpha = 0.3) +
scale_color_manual(values = c(color_human, color_yeast, color_ecoli)) +
scale_fill_manual(values = c(color_human, color_yeast, color_ecoli)) +
labs(subtitle = a.subtitle,
caption = a.caption) +
theme(
panel.background  = element_blank(),
plot.background = element_rect(fill = "white", color = "white"),
plot.title = element_text(
hjust = 0.5,
face = "bold",
color = 'black',
size = 12,
angle = 0,
margin = margin(0, 0, 0.0, 0)
),
plot.subtitle = element_text(
hjust = 0.5,
face = "plain",
color = 'black',
size = 12,
angle = 0,
margin = margin(0, 0, 1, 0)
),
plot.caption = element_text(
hjust = -0.1,
face = "italic",
color = 'black',
size = 7.5,
angle = 0,
margin = margin(5, 0,-4, 0)
),
axis.text.x = element_text(
face = "plain",
color = 'black',
size = 10,
angle = 0,
margin = margin(2, 0, 0, 0)
),
axis.text.y = element_text(
face = "plain",
color = 'black',
size = 10,
angle = 0,
margin = margin(0, 2, 0, 0)
),
axis.title.y = element_text(
face = "plain",
color = 'black',
size = 11,
angle = 90,
margin = margin(0, 4, 0, 0)
),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(
size = 0.3,
linetype = "solid",
color = "black"
),
axis.ticks = element_line(
size = 0.3,
linetype = "solid",
color = "black"
),
axis.title.x = element_text(
hjust = 0.5,
face = "plain",
color = 'black',
size = 11,
angle = 0,
margin = margin(4, 0, 0, 0)
),
legend.title = element_blank(),
legend.background = element_rect(
fill = "transparent",
color = NA,
size = 0.1
),
legend.key = element_rect(fill = "transparent", color = NA),
legend.key.height = unit(0, "cm"),
legend.margin = margin(3, 0, 0, 0),
legend.text.align = 0,
legend.box.spacing = unit(0.0, "cm"),
legend.box.margin = margin(0, 0, 0,-0.55, "cm"),
legend.spacing.x = unit(0.0, "cm"),
legend.position = "top",
legend.text = element_text(
face = "plain",
color = 'black',
size = 9,
angle = 0,
margin = margin(0, 0, 0, 0)
)
) +
coord_cartesian(xlim = c(FC_min, FC_max),
ylim = c(0,10)) +
scale_x_continuous(
name = "log2(A:B)",
breaks = seq(from = round(digits = 0, FC_min), to = round(digits = 0, FC_max), by = 1 ),
expand = expansion(mult = c(.02, .02))
) +
scale_y_continuous(name = "-log10(p_adj)") +
guides(colour = guide_legend(override.aes = list(alpha = 1)))
}
# Generate plot.
plot_Prot_volcano <-  f.p.volcano(Prot3,
subtitle_Prot,
caption_Prot)
# Export plot.
f.export.plot(plot_Prot_volcano, "Prot_volcano", plot_width, plot_height, plot_res)
##### The End
# Import DIA-NN matrix from specified folder into dataframe.
# Uses partial filename match, e.g."pg_matrix", "pr_matrix".
# requires e.g. first-pass matrices to be moved to subfolders.
# e.g. Prot0 <- f.import.matrix(folder_input, "pg_matrix", "\t")
f.import.matrix <- function(a.folder,
a.matrix,
a.sep) {
read.csv(sep = a.sep,
list.files(a.folder,
pattern = a.matrix,
full.names = TRUE))
}
# In DIA-NN matrices, rename columns containing quantitative values
# from filepath to short (stripped) sample name.
# Remove file suffix and filepath.
# e.g. Prot1 <- f.strip.sample.column.name(Prot1, col_test)
f.strip.sample.column.name <- function(a.df, a.columns) {
names(a.df)[a.columns] <-
sub('.*\\.', '', gsub(".mzML|.raw|.dia", "", colnames(a.df[a.columns])))
return(a.df)
}
# Remove entries of MaxQuant contaminant fasta from an e.g. DIA-NN pg_matrix.
# e.g. Prot1 <- f.remove.MQ.cont(Prot1)
f.remove.MQ.cont <- function(a.df) {
a.df <- a.df[!grepl("TREMBL", a.df[, "Genes"]),]
a.df <- a.df[!grepl("SWISS-PROT", a.df[, "Genes"]),]
a.df <- a.df[!grepl("REFSEQ", a.df[, "Protein.Ids"]),]
a.df <- a.df[!grepl("ENSEMBL", a.df[, "Protein.Ids"]),]
a.df <- a.df[!grepl("H-INV:HIT", a.df[, "Protein.Ids"]),]
a.df <- a.df[!grepl("Streptavidin", a.df[, "Protein.Ids"]),]
}
f.p.pca <- function(a.df,
a.col_ctr,
a.col_exp,
a.subtitle,
a.caption) {
# Replicate-level pca calculations
pca <- prcomp(t(na.omit(a.df[,c(a.col_ctr, a.col_exp)])), scale = TRUE)
pca_df <- data.frame(Replicate = rownames(pca$x),
x = pca$x[,1],
y = pca$x[,2])
pca_var <- round(pca$sdev^2/sum(pca$sdev^2)*100,1)
# Replicate pca plot
ggplot(pca_df,
aes(
x = x,
y = y,
label = Replicate)) +
coord_cartesian(
xlim = c(1.05*min(pca_df[,"x"]),1.05*max(pca_df[,"x"])),
ylim = c(1.05*min(pca_df[,"y"]),1.05*max(pca_df[,"y"])))+
geom_point(size = 2.5, alpha = 0.5) +
geom_text(size = 2.5,
vjust= 1.9)+
labs(subtitle = a.subtitle,
caption = a.caption)+
xlab(paste0("PC1 - ", pca_var[1],"%")) +
ylab(paste0("PC2 - ", pca_var[2],"%")) +
theme(
panel.background  = element_blank(),
plot.background = element_rect(fill = "white", color = "white"),
plot.title = element_text(
hjust = 0.5,
face = "bold",
color = 'black',
size = 12,
angle = 0,
margin = margin(0, 0, 0.0, 0)
),
plot.subtitle = element_text(
hjust = 0.5,
face = "plain",
color = 'black',
size = 12,
angle = 0,
margin = margin(0, 0, 1, 0)
),
plot.caption = element_text(
hjust = -0.1,
face = "italic",
color = 'black',
size = 7.5,
angle = 0,
margin = margin(5, 0,-4, 0)
),
axis.text.x = element_text(
face = "plain",
color = 'black',
size = 10,
angle = 0,
margin = margin(2, 0, 0, 0)
),
axis.text.y = element_text(
face = "plain",
color = 'black',
size = 10,
angle = 0,
margin = margin(0, 2, 0, 0)
),
axis.title.y = element_text(
face = "plain",
color = 'black',
size = 11,
angle = 90,
margin = margin(0, 4, 0, 0)
),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(
size = 0.3,
linetype = "solid",
color = "black"
),
axis.ticks = element_line(
size = 0.3,
linetype = "solid",
color = "black"
),
axis.title.x = element_text(
hjust = 0.5,
face = "plain",
color = 'black',
size = 11,
angle = 0,
margin = margin(4, 0, 0, 0)
),
# legend.title = element_blank(),
# legend.background = element_rect(fill = "transparent",
#                                  color = NA, size = 0.1),
#
legend.key = element_rect(fill = "transparent", color = NA),
# legend.key.height = unit(0, "cm"),
# legend.margin = margin(3, 0, 0, 0),
# legend.text.align = 0,
# legend.box.spacing = unit(0.0, "cm"),
# legend.box.margin = margin(0, 0, 0, -0.55, "cm"),
# legend.spacing.x = unit(0.0, "cm"),
# legend.position = "top",
# legend.text = element_text(face = "plain", color = 'black',
#                            size = 9, angle = 0,
#                            margin = margin(0, 0, 0, 0))
) +
guides(colour = guide_legend(override.aes = list(alpha = 1)))
}
# Generate plots.
plot_Prot_pca <-  f.p.pca(Prot3,
col_ctr_Prot,
col_exp_Prot,
subtitle_Prot,
caption_Prot)
folder_input <- "//fileserver/project_jumel/Project_Pavel_Knocks/Exp03/search/03_genes"
Prot0 <- f.import.matrix(folder_input, "pg_matrix", "\t")
# e.g. Prot0 <- f.import.matrix(folder_input, "pg_matrix", "\t")
f.import.matrix <- function(a.folder,
a.matrix,
a.sep) {
read.csv(sep = a.sep,
list.files(a.folder,
pattern = a.matrix,
full.names = TRUE))
}
# Import DIA-NN matrix from specified folder into dataframe.
# Uses partial filename match, e.g."pg_matrix", "pr_matrix".
# requires e.g. first-pass matrices to be moved to subfolders.
# e.g. Prot0 <- f.import.matrix(folder_input, "pg_matrix", "\t")
f.import.matrix <- function(a.folder,
a.matrix,
a.sep) {
read.csv(sep = a.sep,
list.files(a.folder,
pattern = a.matrix,
full.names = TRUE))
}
# In DIA-NN matrices, rename columns containing quantitative values
# from filepath to short (stripped) sample name.
# Remove file suffix and filepath.
# e.g. Prot1 <- f.strip.sample.column.name(Prot1, col_test)
f.strip.sample.column.name <- function(a.df, a.columns) {
names(a.df)[a.columns] <-
sub('.*\\.', '', gsub(".mzML|.raw|.dia", "", colnames(a.df[a.columns])))
return(a.df)
}
# Remove entries of MaxQuant contaminant fasta from an e.g. DIA-NN pg_matrix.
# e.g. Prot1 <- f.remove.MQ.cont(Prot1)
f.remove.MQ.cont <- function(a.df) {
a.df <- a.df[!grepl("TREMBL", a.df[, "Genes"]),]
a.df <- a.df[!grepl("SWISS-PROT", a.df[, "Genes"]),]
a.df <- a.df[!grepl("REFSEQ", a.df[, "Protein.Ids"]),]
a.df <- a.df[!grepl("ENSEMBL", a.df[, "Protein.Ids"]),]
a.df <- a.df[!grepl("H-INV:HIT", a.df[, "Protein.Ids"]),]
a.df <- a.df[!grepl("Streptavidin", a.df[, "Protein.Ids"]),]
}
folder_input <- "//fileserver/project_jumel/Project_Pavel_Knocks/Exp03/search/03_genes"
Prot0 <- f.import.matrix(folder_input, "pg_matrix", "\t")
Prot1 <- Prot0
Prot1 %<>%
f.strip.sample.column.name(c(6:53)) %>%
f.remove.MQ.cont()
View(Prot1)
plot_Prot_pca <-  f.p.pca(Prot1)
f.p.pca <- function(a.df
) {
# Replicate-level pca calculations
pca <- prcomp(t(na.omit(a.df[,c(6:53)])), scale = TRUE)
pca_df <- data.frame(Replicate = rownames(pca$x),
x = pca$x[,1],
y = pca$x[,2])
pca_var <- round(pca$sdev^2/sum(pca$sdev^2)*100,1)
# Replicate pca plot
ggplot(pca_df,
aes(
x = x,
y = y,
label = Replicate)) +
coord_cartesian(
xlim = c(1.05*min(pca_df[,"x"]),1.05*max(pca_df[,"x"])),
ylim = c(1.05*min(pca_df[,"y"]),1.05*max(pca_df[,"y"])))+
geom_point(size = 2.5, alpha = 0.5) +
geom_text(size = 2.5,
vjust= 1.9)+
# labs(subtitle = a.subtitle,
#      caption = a.caption)+
xlab(paste0("PC1 - ", pca_var[1],"%")) +
ylab(paste0("PC2 - ", pca_var[2],"%")) +
theme(
panel.background  = element_blank(),
plot.background = element_rect(fill = "white", color = "white"),
plot.title = element_text(
hjust = 0.5,
face = "bold",
color = 'black',
size = 12,
angle = 0,
margin = margin(0, 0, 0.0, 0)
),
plot.subtitle = element_text(
hjust = 0.5,
face = "plain",
color = 'black',
size = 12,
angle = 0,
margin = margin(0, 0, 1, 0)
),
plot.caption = element_text(
hjust = -0.1,
face = "italic",
color = 'black',
size = 7.5,
angle = 0,
margin = margin(5, 0,-4, 0)
),
axis.text.x = element_text(
face = "plain",
color = 'black',
size = 10,
angle = 0,
margin = margin(2, 0, 0, 0)
),
axis.text.y = element_text(
face = "plain",
color = 'black',
size = 10,
angle = 0,
margin = margin(0, 2, 0, 0)
),
axis.title.y = element_text(
face = "plain",
color = 'black',
size = 11,
angle = 90,
margin = margin(0, 4, 0, 0)
),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(
size = 0.3,
linetype = "solid",
color = "black"
),
axis.ticks = element_line(
size = 0.3,
linetype = "solid",
color = "black"
),
axis.title.x = element_text(
hjust = 0.5,
face = "plain",
color = 'black',
size = 11,
angle = 0,
margin = margin(4, 0, 0, 0)
),
# legend.title = element_blank(),
# legend.background = element_rect(fill = "transparent",
#                                  color = NA, size = 0.1),
#
legend.key = element_rect(fill = "transparent", color = NA),
# legend.key.height = unit(0, "cm"),
# legend.margin = margin(3, 0, 0, 0),
# legend.text.align = 0,
# legend.box.spacing = unit(0.0, "cm"),
# legend.box.margin = margin(0, 0, 0, -0.55, "cm"),
# legend.spacing.x = unit(0.0, "cm"),
# legend.position = "top",
# legend.text = element_text(face = "plain", color = 'black',
#                            size = 9, angle = 0,
#                            margin = margin(0, 0, 0, 0))
) +
guides(colour = guide_legend(override.aes = list(alpha = 1)))
}
plot_Prot_pca <-  f.p.pca(Prot1)
print(plot_Prot_pca)
